webpackJsonp([0x7e247a714b65],{419:function(n,e){n.exports={data:{markdownRemark:{html:'<h1 id="react-lifecycle-hooks"><a href="#react-lifecycle-hooks" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>React Lifecycle Hooks</h1>\n<p>React provides lifecycle methods that you can override into the Class Components. Methods prefixed with <strong>will</strong> are called right before something happens, and methods prefixed with <strong>did</strong> are called right after something happens.</p>\n<h2 id="lifecycle-methods"><a href="#lifecycle-methods" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Lifecycle Methods</h2>\n<p>A React component has three phases during its lifecycle. It can be <strong>mounting</strong>, <strong>updating</strong>, <strong>unmounting</strong> and <strong>error handling</strong>.</p>\n<h3 id="mounting"><a href="#mounting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Mounting</h3>\n<p>During mounting you should set the state on <code>constructor()</code> and add DOM event handlers, timers (etc) or dispatch network requests on <code>componentDidMount()</code>.These methods are called in the following order when a component is being created and inserted into the DOM:</p>\n<h4 id="constructorprops"><a href="#constructorprops" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>constructor(props)</h4>\n<hr>\n<p>The <code>constructor()</code> method is invoked before it is mounted. When implementing the constructor, you should call super(props) before any other statement. Otherwise, this.props will be undefined.</p>\n<ul>\n<li>Initialize state, just assign an object to <code>this.state</code>; don\'t try to call <code>setState()</code>.</li>\n<li>Bind event handlers, <code>this.handleOnClick = this.handleOnClick.bind(this);</code>.</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">/*Initialize your state properties.*/</span><span class="token punctuation">}</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleOnClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleOnClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4 id="componentwillmount"><a href="#componentwillmount" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentWillMount()</h4>\n<hr>\n<p>The <code>componentWillMount()</code> method is invoked once before the initial rendering and is the only lifecycle hook called on server rendering.</p>\n<ul>\n<li>Load data asynchronously.</li>\n<li>Call <code>setState()</code>. It will not trigger an extra rendering.</li>\n<li>Configure the root component (e.g.: setting up a Firebase connection).</li>\n<li>Avoid to use.</li>\n</ul>\n<p>It\'s recommended to use the <code>constructor()</code> instead and avoid subscriptions in this method.</p>\n<p><a id="render"></a></p>\n<h4 id="render"><a href="#render" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>render()</h4>\n<hr>\n<p>The <code>render()</code> method is required and must return a single React Element which can contain children, null or false if nothing should be rendered. In newer React implementations (16.x), render method can return an array of React Elements as well as strings and React 16.2.0 introduced fragments to return React Elements without using an array.</p>\n<p>The render method should be pure, it does not modify component state.</p>\n<p><strong>single element</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>Hello World<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>array of elements</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token punctuation">[</span>\n        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span>Item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>Item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span>Item <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n      <span class="token punctuation">]</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>strings</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">\'Hello world, no spans!\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><strong>fragment</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span>Item <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"B"</span><span class="token operator">></span>Item <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n        <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token string">"C"</span><span class="token operator">></span>Item <span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4 id="componentdidmount"><a href="#componentdidmount" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentDidMount()</h4>\n<hr>\n<p>The <code>componentDidMount()</code> method is invoked immediately after a component is mounted. This lifecycle has access to DOM and it won\'t get triggered on server rendering.</p>\n<ul>\n<li>Setup subscriptions.</li>\n<li>Load data from a remote endpoint.</li>\n<li>Initialize third party libraries.</li>\n</ul>\n<p>Notice that calling <code>setState()</code> in this method will trigger an extra rendering, but it will happen before the browser updates the screen, thus the user won\'t see the intermediate state.</p>\n<h3 id="updating"><a href="#updating" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Updating</h3>\n<hr>\n<p>Updating takes place when parents change properties and .setState() is invoked. These methods are called in the following order when a component is being re-rendered because of props or state changes:</p>\n<h4 id="componentwillreceivepropsnewprops"><a href="#componentwillreceivepropsnewprops" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentWillReceiveProps(newProps)</h4>\n<p>The <code>componentWillReceiveProps()</code> method is invoked when a component is receiving new props. React will call this method even if the props have not change.</p>\n<ul>\n<li>Update the state <code>setState()</code>.</li>\n</ul>\n<p>Make sure to check if the properties indeed changed.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Check if the name has changed. \n     */</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name <span class="token operator">!==</span> newProps<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        name<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4 id="shouldcomponentupdatenextprops-nextstate"><a href="#shouldcomponentupdatenextprops-nextstate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>shouldComponentUpdate(nextProps, nextState)</h4>\n<p>The <code>shouldComponentUpdate()</code> method is invoked when new props or state are being received. By default always returns true, but if an implementation will return false then <code>componentWillUpdate()</code>, <code>render()</code> and <code>componentDidUpdate()</code> will not be invoked.</p>\n<ul>\n<li>\n<p>Determine if render needed:</p>\n<ul>\n<li>Compare <code>this.props</code> to <code>nextProps</code>.</li>\n<li>Compare <code>this.state</code> to <code>nextState</code>.</li>\n</ul>\n</li>\n</ul>\n<p><code>React.PureComponent</code> class implements this method with a shallow prop and state compare and returns false to tell React the update can be skipped.</p>\n<h4 id="componentwillupdatenextprops-nextstate"><a href="#componentwillupdatenextprops-nextstate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentWillUpdate(nextProps, nextState)</h4>\n<hr>\n<p>The <code>componentWillUpdate()</code> method is invoked before new props or state are being received.</p>\n<ul>\n<li>Set/reset class properties before render.</li>\n<li>Can NOT use <code>setState()</code> or dispatch an action.</li>\n</ul>\n<h4 id="render-"><a href="#render-" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>render() <a href="#render">></a></h4>\n<hr>\n<h4 id="componentdidupdateprevprops-prevstate"><a href="#componentdidupdateprevprops-prevstate" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentDidUpdate(prevProps, prevState)</h4>\n<hr>\n<p>The <code>componentDidUpdate()</code> method is invoked immediately after updating occurs.</p>\n<ul>\n<li>Manipulate DOM.</li>\n<li>Dispatch network requests.</li>\n</ul>\n<h3 id="unmounting"><a href="#unmounting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Unmounting</h3>\n<p>The following method is called when a component is being removed from the DOM:</p>\n<h4 id="componentwillunmount"><a href="#componentwillunmount" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentWillUnmount()</h4>\n<hr>\n<p>The <code>componentWillUnmount()</code> is invoked immediately before a component is unmounted and destroyed.</p>\n<ul>\n<li>Perform cleanup.</li>\n<li>Invalidating timers.</li>\n<li>Canceling network requests.</li>\n<li>Clean up subscriptions created in <code>componentDidMount()</code>.</li>\n</ul>\n<p>Notice that <code>componentWillMount()</code> and <code>componentWillUnmount()</code> are not synchronous. Meaning that if an error occurred in <code>componentWillMount()</code> and <code>render()</code> will never be invoked, <code>componentWillUnmount()</code> will never be invoked as well.</p>\n<h3 id="error-handling"><a href="#error-handling" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Error Handling</h3>\n<h4 id="componentdidcatcherror-info"><a href="#componentdidcatcherror-info" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>componentDidCatch(error, info)</h4>\n<p>The <code>componentDidCatch()</code> method catches errors in the components below in a tree.</p>\n<ul>\n<li>Capture unhandled JavaScript errors in the below tree.</li>\n<li>Display a fallback UI.</li>\n<li>Use <code>setState()</code> to render a fallback UI when capture an error.</li>\n</ul>',timeToRead:5,excerpt:"React Lifecycle Hooks React provides lifecycle methods that you can override into the Class Components. Methods prefixed with  will  are…",frontmatter:{title:"React Lifecycle Hooks",cover:"https://unsplash.it/400/300/?random?BoldMage",date:"13-02-2018",category:"front-end",tags:["programming","front-end","react"]},fields:{slug:"/react-lifecycle-hooks"}}},pathContext:{slug:"/react-lifecycle-hooks"}}}});
//# sourceMappingURL=path---react-lifecycle-hooks-415232be8a00128efdc1.js.map